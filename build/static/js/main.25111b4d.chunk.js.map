{"version":3,"sources":["context.js","components/SetupForm.js","components/Loading.js","components/Modal.js","App.js","index.js"],"names":["table","sports","history","politics","AppContext","React","createContext","AppProvider","children","useState","amount","category","difficulty","setupQuiz","setSetupQuiz","loading","setLoading","showModal","setShowModal","error","setError","questions","setQuestions","currentIndexQuestion","setCurrentIndexQuestion","score","setScore","fetchDatasFromApi","e","a","preventDefault","AMOUNT","CATEGORY","DIFFICULTY","BASEURL","axios","get","response","data","results","length","QUESTIONS","map","result","question","correct_answer","incorrect_answers","answers","console","log","Provider","value","playAgain","par","window","location","reload","useGlobalContext","useContext","SetupForm","className","htmlFor","type","name","id","min","max","onChange","target","onClick","Loading","Modal","App","shuffled","sort","Math","random","ans","index","innerText","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.25111b4d.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport React, { useState, useContext, useEffect } from \"react\";\r\n// https://opentdb.com/api.php?amount=10&category=23&difficulty=medium&type=multiple\r\n\r\nconst table = {\r\n  sports: 21,\r\n  history: 23,\r\n  politics: 24,\r\n};\r\n\r\nconst AppContext = React.createContext();\r\n\r\nconst AppProvider = ({ children }) => {\r\n  //\r\n  const [setupQuiz, setSetupQuiz] = useState({\r\n    amount: \"10\",\r\n    category: \"sports\",\r\n    difficulty: \"easy\",\r\n  });\r\n  const [loading, setLoading] = useState(false);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [error, setError] = useState(false);\r\n  const [questions, setQuestions] = useState([]);\r\n  const [currentIndexQuestion, setCurrentIndexQuestion] = useState(0);\r\n  const [score, setScore] = useState(0);\r\n\r\n  const fetchDatasFromApi = async (e) => {\r\n    e.preventDefault();\r\n    //arrangements of url\r\n    const API_ENDPOINT = \"https://opentdb.com/api.php?\";\r\n    const AMOUNT = `amount=${setupQuiz.amount}&`;\r\n    const CATEGORY = `category=${table[setupQuiz.category]}&`;\r\n    const DIFFICULTY = `difficulty=${setupQuiz.difficulty}&`;\r\n    const BASEURL = `${API_ENDPOINT}${AMOUNT}${CATEGORY}${DIFFICULTY}type=multiple`;\r\n\r\n    //FETCHING DATAS\r\n    setLoading(true);\r\n    const response = await axios.get(BASEURL);\r\n\r\n    //if thereis no questions\r\n    if (response.data.results.length === 0) {\r\n      setError(\"Can't Generate Questions, Please Try Different Options\");\r\n    } else {\r\n      //take the questions\r\n      const QUESTIONS = response.data.results.map((result) => {\r\n        const { question, correct_answer, incorrect_answers } = result;\r\n        return {\r\n          question,\r\n          correct_answer,\r\n          answers: [...incorrect_answers, correct_answer],\r\n        };\r\n      });\r\n      console.log(QUESTIONS);\r\n      setQuestions(QUESTIONS);\r\n    }\r\n\r\n    setLoading(false);\r\n  };\r\n\r\n  const playAgain = (par) => {\r\n    console.log(par);\r\n    window.location.reload();\r\n  };\r\n  return (\r\n    <AppContext.Provider\r\n      value={{\r\n        setSetupQuiz,\r\n        setupQuiz,\r\n        fetchDatasFromApi,\r\n        loading,\r\n        setLoading,\r\n        showModal,\r\n        setShowModal,\r\n        error,\r\n        questions,\r\n        currentIndexQuestion,\r\n        setCurrentIndexQuestion,\r\n        score,\r\n        setScore,\r\n        playAgain,\r\n      }}\r\n    >\r\n      {children}\r\n    </AppContext.Provider>\r\n  );\r\n};\r\n// make sure use\r\nexport const useGlobalContext = () => {\r\n  return useContext(AppContext);\r\n};\r\n\r\nexport { AppContext, AppProvider };\r\n/**\r\n *\r\n *\r\n\r\n *        //  setQuestions(QUESTIONS)\r\n      //   //take answers from api result\r\n      //   const ANSWERS = response.data.results.map((result) => {\r\n      //     return {\r\n      //       correctAnswer: result.correct_answer,\r\n      //       incorrectAnswers: result.incorrect_answers,\r\n      //     };\r\n      //   });\r\n *\r\n *       //   setAnswers(ANSWERS);\r\n\r\n      //   setQuestions(...questions, response.data.results.question);\r\n      //   console.log(questions);\r\n */\r\n","import React from \"react\";\r\nimport { useGlobalContext } from \"../context\";\r\nconst SetupForm = () => {\r\n  const { setupQuiz, setSetupQuiz, fetchDatasFromApi, error } =\r\n    useGlobalContext();\r\n\r\n  return (\r\n    <main>\r\n      <section className=\"quiz quiz-small\">\r\n        <form className=\"setup-form\">\r\n          <h2>setup quiz</h2>\r\n          <div className=\"form-control\">\r\n            <label htmlFor=\"amount\">number of questions</label>\r\n            <input\r\n              type=\"number\"\r\n              name=\"amount\"\r\n              id=\"amount\"\r\n              className=\"form-input\"\r\n              min=\"1\"\r\n              max=\"50\"\r\n              value={setupQuiz.amount}\r\n              onChange={(e) =>\r\n                setSetupQuiz({ ...setupQuiz, amount: e.target.value })\r\n              }\r\n            />\r\n          </div>\r\n          <div className=\"form-control\">\r\n            <label htmlFor=\"category\">category</label>\r\n            <select\r\n              name=\"category\"\r\n              onChange={(e) =>\r\n                setSetupQuiz({ ...setupQuiz, category: e.target.value })\r\n              }\r\n              id=\"category\"\r\n              className=\"form-input\"\r\n            >\r\n              <option value=\"sports\">sports</option>\r\n              <option value=\"history\">history</option>\r\n              <option value=\"politics\">politics</option>\r\n            </select>\r\n          </div>\r\n          <div className=\"form-control\">\r\n            <label htmlFor=\"difficulty\">select difficulty</label>\r\n            <select\r\n              name=\"difficulty\"\r\n              onChange={(e) =>\r\n                setSetupQuiz({ ...setupQuiz, category: e.target.value })\r\n              }\r\n              id=\"difficulty\"\r\n              className=\"form-input\"\r\n            >\r\n              <option value=\"easy\">easy</option>\r\n              <option value=\"medium\">medium</option>\r\n              <option value=\"hard\">hard</option>\r\n            </select>\r\n          </div>\r\n          {error && (\r\n            <p className=\"error\">\r\n              can't generate questions, please try different options\r\n            </p>\r\n          )}\r\n          <button\r\n            type=\"submit\"\r\n            className=\"submit-btn\"\r\n            onClick={fetchDatasFromApi}\r\n          >\r\n            start\r\n          </button>\r\n        </form>\r\n      </section>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default SetupForm;\r\n","import React from \"react\";\r\n\r\nconst Loading = () => {\r\n  return (\r\n    <main>\r\n      <div className=\"loading\"></div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n","import { useGlobalContext } from \"../context\";\r\nconst Modal = () => {\r\n  const { score, playAgain } = useGlobalContext();\r\n  return (\r\n    <div className=\"modal-container\">\r\n      <div className=\"modal-content\">\r\n        <h2>congrats!</h2>\r\n        <p>You answered {score} of questions correctly</p>\r\n        <button className=\"close-btn\" onClick={(e) => playAgain(e)}>\r\n          play again\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import React, { useState } from \"react\";\r\nimport { useGlobalContext } from \"./context\";\r\nimport SetupForm from \"./components/SetupForm\";\r\nimport Loading from \"./components/Loading\";\r\nimport Modal from \"./components/Modal\";\r\nfunction App() {\r\n  const {\r\n    loading,\r\n    showModal,\r\n    setShowModal,\r\n    questions,\r\n    currentIndexQuestion,\r\n    setCurrentIndexQuestion,\r\n    score,\r\n    setScore,\r\n  } = useGlobalContext();\r\n  if (loading) {\r\n    return <Loading />;\r\n  }\r\n\r\n  if (currentIndexQuestion > 9) {\r\n    return <Modal />;\r\n  }\r\n\r\n  if (questions.length === 0) {\r\n    return <SetupForm />;\r\n  } else {\r\n    //destructing\r\n    console.log(questions[9]);\r\n    const { answers, question, correct_answer } =\r\n      questions[currentIndexQuestion];\r\n\r\n    //shuffling\r\n    let shuffled = answers.sort(() => 0.5 - Math.random());\r\n\r\n    //matching answers\r\n    const findAnswer = (value) => {\r\n      if (value === correct_answer) {\r\n        setScore(score + 1);\r\n      }\r\n      setCurrentIndexQuestion(currentIndexQuestion + 1);\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <main>\r\n          {showModal ? (\r\n            <Modal />\r\n          ) : (\r\n            <section className=\"quiz\">\r\n              <p className=\"correct-answers\">\r\n                {score} correct from {questions.length} questions\r\n              </p>\r\n              <article className=\"container\">\r\n                <h2>\r\n                  {currentIndexQuestion + 1}. {question}\r\n                </h2>\r\n                <div className=\"btn-container\">\r\n                  {shuffled.map((ans, index) => {\r\n                    return (\r\n                      <button\r\n                        className=\"answer-btn\"\r\n                        onClick={(e) => findAnswer(e.target.innerText, index)}\r\n                        key={index}\r\n                      >\r\n                        {ans}\r\n                      </button>\r\n                    );\r\n                  })}\r\n                </div>\r\n              </article>\r\n              <button\r\n                className=\"next-question\"\r\n                onClick={() =>\r\n                  setCurrentIndexQuestion(currentIndexQuestion + 1)\r\n                }\r\n              >\r\n                next question\r\n              </button>\r\n            </section>\r\n          )}\r\n        </main>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport { AppProvider } from \"./context\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <AppProvider>\r\n      <App />\r\n    </AppProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}